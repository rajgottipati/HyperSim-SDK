{"extracted_information": "The document outlines several performance design patterns for Amazon S3, including caching, timeouts and retries, horizontal scaling and request parallelization, optimizing for high-request rate workloads, and accelerating geographically disparate data transfers. Specific details are provided for connection scaling, byte-range fetches, and optimization techniques for SDKs.", "specifications": {"byte_range_fetch_granularity": "8-16 MB for concurrent requests when downloading large objects within a Region from S3 to EC2.", "network_throughput_saturation": "One concurrent request per 85-90 MB/s of desired network throughput.", "concurrent_requests_10gbps_nic": "~15 concurrent requests over separate connections to saturate a 10 Gb/s NIC.", "retry_guideline_small_requests": "Retry GET/PUT after 2 seconds for requests < 512 KB; second retry after additional 4 seconds.", "high_request_rates_s3": "Sustained rates of over 5,000 requests/second to a small number of objects may receive 503 slowdown responses.", "high_request_rates_per_prefix": "Consistently generates more than 3,500 PUT/COPY/POST/DELETE or 5,500 GET/HEAD requests per second per prefix."}, "pricing": {"transfer_acceleration_cost": "Charged only for transfers where Amazon S3 Transfer Acceleration can potentially improve upload performance."}, "features": [{"name": "Caching for frequently accessed content", "description": "Utilizes caches like Amazon CloudFront, Amazon ElastiCache, or AWS Elemental MediaStore to reduce latency, increase data transfer rates, and lower S3 request costs for repeated GET requests on common object sets."}, {"name": "Timeouts and retries for latency-sensitive applications", "description": "Implement retry logic with exponential backoff for HTTP 503 (slowdown) responses. AWS SDKs provide automatic retry logic. Recommended to use a new connection and fresh DNS lookup for retries. For large variably sized requests (>128 MB), track throughput and retry slowest 5%. For smaller requests (<512 KB), retry after 2 seconds, with subsequent retries using exponential backoff (e.g., 2s, then 4s). For fixed-size requests, retry slowest 1%."}, {"name": "Horizontal scaling and request parallelization", "description": "Scale parallel requests to S3 service endpoints to distribute load. Use applications with multiple connections to GET/PUT data in parallel (e.g., S3 Transfer Manager in AWS Java SDK or custom parallel requests via threads/instances). For REST API, use a pool of HTTP connections and re-use them to avoid per-request connection setup overhead. Ensure DNS queries spread requests over a wide pool of S3 IP addresses."}, {"name": "Optimizing for high-request rate workloads", "description": "Strategies include distributing requests across multiple prefixes (e.g., randomized prefixes like `a1b2/log-2024-01-01.txt`), implementing exponential backoff for 503 errors (built-in in AWS SDKs), monitoring request patterns via CloudWatch metrics (especially 5xx errors), gradually ramping up request rates, and using multiple HTTP connections. Amazon S3 Express One Zone is designed for single-digit millisecond latencies and high request rates."}, {"name": "Amazon S3 Transfer Acceleration", "description": "Accelerates geographically disparate data transfers using CloudFront's globally distributed edge locations. Ideal for cross-continental transfers, fast internet connections, large objects, or high volume uploads. Data is routed to S3 over an optimized network path from the edge location. Can be set up on new or existing buckets. Speed comparison tool available for testing."}], "statistics": {}, "temporal_info": {}, "geographical_data": {"transfer_acceleration_po_ps": "AWS edge network has points of presence in more than 50 locations for CloudFront, Route 53, and S3 Transfer Acceleration."}, "references": ["https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/", "https://aws.amazon.com/blogs/storage/turbocharge-amazon-s3-with-amazon-elasticache-for-redis/", "https://docs.aws.amazon.com/mediastore/latest/ug/", "https://docs.aws.amazon.com/sdkref/latest/guide/feature-retry-behavior.html", "https://docs.aws.amazon.com/kms/latest/developerguide/limits.html", "https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/transfer-manager.html", "https://docs.aws.amazon.com/AmazonS3/latest/API/", "https://docs.aws.amazon.com/AmazonS3/latest/API/MakingRequests.html", "https://s3-accelerate-speedtest.s3-accelerate.amazonaws.com/en/accelerate-speed-comparsion.html", "./transfer-acceleration-examples.html", "./directory-bucket-high-performance.html#s3-express-one-zone"]}