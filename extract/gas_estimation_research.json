{"extracted_information": "Research findings detail the 'minimum gas limit' and 'gas used' concepts in Ethereum smart contracts, proposing precise definitions and demonstrating their differences. Two main estimators, `eth_estimateGas()` and `debug_traceCall()`, are evaluated for accuracy. Methodologies involve empirical study on real Ethereum transactions, using specific accuracy metrics. Technical implementation details of the Ethereum gas system, including opcode costs and refund mechanisms, are provided.", "specifications": {"ethereum_gas_system": {"gas_limit_Tg": "Budget set by transaction sender, paid upfront. If exhausted, transaction fails.", "gas_used": "Actual gas consumed by transaction, reported in receipt.", "minimum_gas_limit_min_g": "Smallest gas budget ensuring successful transaction execution without out-of-gas exception. Formally defined as `min{g | Upsilon^z(sigma, T(g)) = 1}`.", "gas_cost_breakdown": {"total_gas_cost_g_cost": "g_0 + g_exec", "intrinsic_cost_g_0": "Cost deducted before execution. Calculated as g_data + g_create + g_tx + g_access.", "g_data": "Cost for allocating data/code.", "g_create": "32000 gas for contract creation, 0 otherwise.", "g_tx": "21000 gas (flat constant transaction cost).", "g_access": "Proportional to transaction's accessList element size.", "execution_cost_g_exec": "Cost of EVM instructions performed.", "gas_opcode_costs": {"ADD": "3 gas units", "JUMP": "8 gas units", "SLOAD (cold access)": "2100 gas units"}}, "gas_refund_mechanism": {"refund_R": "min{floor((T_g - g_cost)/5), A_r}", "A_r": "Refund value updated when clearing storage values (e.g., via SSTORE).", "g_used_calculation": "g_cost - R"}, "gas_stipend_SSTORE": "Requires gas budget to exceed 2300 units; if not, causes exceptional halt. This value is not consumed."}}, "pricing": {}, "features": [{"type": "Gas Estimation Algorithm", "name": "eth_estimateGas()", "description": "Calculates the minimum gas limit for a given transaction and blockchain state. It performs a binary search to identify the smallest gas budget that allows the transaction to execute without reverting. Implemented in Geth (Go Ethereum client).", "implementation_details": "Uses `TraceCall` internally. Searches within range `[g_0, g_top]`, where `g_top = min{block_g, g_from}`. Can miss global minimum if multiple non-reverting gas intervals exist, though typically SCs have single interval.", "accuracy_metrics": {"median_ape_d1": "0%", "median_ape_d2_delta_21": "0.01%", "median_ape_d2_delta_101": "0.55%", "mean_ape_d1": "0% to 2.04%", "mean_ape_d2": "0% to 9.3%", "r_squared_d1": "1 to 0.9967", "r_squared_d2": "1 to 0.9613"}}, {"type": "Gas Estimation Algorithm", "name": "debug_traceCall()", "description": "Calculates the gas used by a specific transaction for a given blockchain state. It executes the transaction and collects a detailed trace, including gas used and status code. Implemented in Geth.", "implementation_details": "Simulates transaction execution (e.g., as the last transaction of a block). Returns `(status_code, gas_used)`.", "accuracy_metrics": {"median_ape_d1": "0%", "median_ape_d2_delta_21": "0.02%", "median_ape_d2_delta_101": "0.8%", "mean_ape_d1": "0% to 2.14%", "mean_ape_d2": "0% to 10.83%", "r_squared_d1": "1 to 0.9966", "r_squared_d2": "1 to 0.1168 (influenced by outlier at Delta=101)"}}, {"type": "Gas Estimation Algorithm (Baseline)", "name": "Recent Gas Usage Model (RGUM)", "description": "Estimates gas used based on the mean of the gas used by the last 10 transactions sent to the same function. Variations include `RGUM_median`, `RGUM_max`, `RGUM_min`.", "accuracy_metrics": {"rgum_median_ape_d2": "15.34% to 16.2% (for minimum gas limit estimation)", "rgum_max_r_squared_d2": "0.2692 to 0.3407 (for minimum gas limit estimation)", "rgum_median_ape_d2_gas_used": "12.38% to 13.56%"}}, {"type": "Gas Estimation Algorithm (Related Work)", "name": "Solidity Compiler (SOLC)", "description": "Offline gas estimator. Estimates gas used by SC functions without considering transaction arguments and blockchain states. Limited accuracy for functions with dynamic loops (returns 'infinity').", "category": "Offline"}, {"type": "Gas Estimation Algorithm (Related Work)", "name": "GASTAP (Gas-aware Smart Contract Analysis Platform) / GASOL", "description": "Offline estimator. Yields worst-case gas used by public functions. Generates Control Flow Graphs (CFGs) and rule-based representations to formulate gas equations.", "category": "Offline"}, {"type": "Gas Estimation Algorithm (Related Work)", "name": "Trace-based Dynamic Gas Estimator (TDGE)", "description": "Online estimator. Applies machine learning to estimate gas used based on transaction history. Designed for functions with loops and dynamic gas costs. Trains from local fork, may not generalize well to real-world contexts.", "category": "Online"}, {"type": "Gas Estimation Algorithm (Related Work)", "name": "V-GAS", "description": "Online estimator. Based on static analysis and feedback-driven fuzz testing. Predicts worst-case gas used by public functions using JS-EVM and genetic algorithms. Can lead to overestimation.", "category": "Online"}], "statistics": {"experimental_data_set": {"fork": "Ethereum Mainnet Bellatrix fork", "block_range": "15,481,719 to 15,537,393", "total_blocks": 55674, "selected_transactions": 38174, "transaction_type": "Smart Contract function calls (first transaction of block, successfully executed)", "delta_values_for_estimation": [1, 6, 11, 21, 101]}, "accuracy_metrics": {"absolute_percentage_error_ape": "| (y_i - y_hat_i) / y_i | * 100", "r_squared_r2": "1 - (sum(y_i - y_hat_i)^2 / sum(y_i - y_bar)^2)"}, "data_set_classification": {"dataset_d1": {"count": 4875, "description": "Transactions whose executions do not involve block-context-dependent opcodes."}, "dataset_d2": {"count": 33299, "description": "Transactions involving at least one block-context-dependent opcode."}}, "statistical_tests_used": ["Kruskal-Wallis test (nonparametric test, 95% significance level)", "Conover post hoc test", "Kolmogorov-Smirnov (KS) test (nonparametric test, 95% significance level)"], "research_question_findings": {"rq1_min_gas_limit_estimation": {"finding": "eth_estimateGas() maintains near-perfect precision (median APE 0%) for transactions without block-state-dependent opcodes (Dataset D1) up to Delta=11. For transactions with such opcodes (Dataset D2), precision degrades significantly even at Delta=6. (Expected within 2 minutes/10 blocks for D1 for near-perfect estimation).", "statistical_difference_d1": "No statistical difference between EstimateGas APE distributions for Delta=1, 6, 11. Statistically significant drop only at Delta=101.", "statistical_difference_d2": "Statistically significant difference (precision drop) between EstimateGas APE distributions for Delta=1 and Delta=6."}, "rq2_gas_used_estimation": {"finding": "debug_traceCall() maintains near-perfect precision (median APE 0%) for transactions without block-state-dependent opcodes (Dataset D1) up to Delta=11. For transactions with such opcodes (Dataset D2), precision degrades significantly even at Delta=6. (Expected within 2 minutes/10 blocks for D1 for near-perfect estimation).", "statistical_difference_d1": "No statistical difference between TraceCall APE distributions for Delta=1, 6, 11 at 5% significance. Significant difference between Delta=1 and Delta=21 even at 1% significance.", "statistical_difference_d2": "Statistically significant difference (precision drop) between TraceCall APE distributions for Delta=1 and Delta=6."}, "rq3_min_gas_limit_vs_gas_used": {"finding": "Statistically significant differences exist between minimum gas limit and gas used distributions for both datasets (D1 p-value ~1.5e-14, D2 p-value ~0).", "d1_results": {"median_ape": "0% (suggests no difference in >=50% transactions)", "r_squared": "1 (linear relationship, possible to predict one from other)"}, "d2_results": {"median_ape": "6.08%", "mean_ape": "Considerably larger than D1", "r_squared": "-3.79 (indicates unreliability in prediction)"}}}}, "temporal_info": {"publication_date": "16 June 2025 (Journal of Cloud Computing)", "data_collection_period": "Ethereum Mainnet Bellatrix fork (block 15,481,719 to 15,537,393)", "ethereum_block_time_average": "Approximately 12 seconds"}, "geographical_data": {}, "references": ["Buterin V (2014) Ethereum: A next generation smart contract & decentralized application platform.", "Nakamoto S (2008) Bitcoin: A peer-to-peer electronic cash system.", "Solidity (2023) Solidity - solidity 0.8.17 documentation.", "Antonopoulos AM, Wood G (2018) Mastering Ethereum: Building Smart Contracts and DApps.", "Bouraga S (2020) An evaluation of gas consumption prediction on ethereum based on transaction history summarization.", "AlShamsi M, Al-Emran M, Shaalan K (2022) A systematic review on blockchain adoption.", "Marchesi L, Marchesi M, Destefanis G, Barabino G, Tigano D (2020) Design patterns for gas optimization in ethereum.", "Grech N, Kong M, Jurisevic A, Brent L, Scholz B, Smaragdakis Y (2018) Madmax: Surviving out-of-gas conditions in ethereum smart contracts.", "Liu C, Gao J, Li Y, Wang H, Chen Z (2020) Studying gas exceptions in blockchain-based cloud applications.", "Zarir AA, Oliva GA, Jiang ZMJ, Hassan AE (2021) Developing cost-effective blockchain-powered applications: A case study of the gas usage of smart contract transactions in the ethereum blockchain platform.", "Ethereum G (2023) Go ethereum documentation.", "Ethereum P (2020) Parity ethereum documentation.", "Nethermind (2023) Nethermind documentation.", "Erigon (2023) Erigon documentation.", "Foundation E (2023) Ethereum development documentation.", "Albert E, Correas J, Gordillo P, Román-Díez G, Rubio A (2020) Gasol: Gas analysis and optimization for ethereum smart contracts.", "Ma F, Ren M, Ying F, Sun W, Song H, Shi H, Jiang Y, Li H (2022) V-gas: Generating high gas consumption inputs to avoid out-of-gas vulnerability.", "Li C, Nie S, Cao Y, Yu Y, Hu Z (2020) Trace-based dynamic gas estimation of loops in smart contracts.", "Team S (2023) Installing solidity compiler - solidity 0.8.17 documentation.", "Marescotti M, Blicha M, Hyvärinen AEJ, Asadi S, Sharygina N (2018) Computing exact worst-case gas consumption for smart contracts.", "Albert E, Gordillo P, Rubio A, Sergey I (2018) Running on fumes–preventing out-of-gas vulnerabilities in ethereum smart contracts using static resource analysis.", "Perez-Carrasco V, Klemen M, López-García P, Morales JF, Hermenegildo MV (2020) Cost analysis of smart contracts via parametric resource analysis.", "Bistarelli S, Mazzante G, Micheletti M, Mostarda L, Tiezzi F (2019) Analysis of ethereum smart contracts and opcodes.", "Khan MMA, Sarwar HMA, Awais M (2021) Gas consumption analysis of ethereum blockchain transactions.", "Ding Y, Wang C, Zhong Q, Li H, Tan J, Li J (2020) Function-level dynamic monitoring and analysis system for smart contract.", "Signer C (2018) Gas cost analysis for ethereum smart contracts.", "Ashraf I, Ma X, Jiang B, Chan WK (2020) Gasfuzzer: Fuzzing ethereum smart contract binaries to expose gas-oriented exception security vulnerabilities.", "Correas J, Gordillo P, Román-Díez G (2021) Static profiling and optimization of ethereum smart contracts using resource analysis.", "Severin B, Hesenius M, Blum F, Hettmer M, Gruhn V (2022) Smart money wasting: Analyzing gas cost drivers of ethereum smart contracts.", "Luu L, Chu DH, Olickel H, Saxena P, Hobor A (2016) Making smart contracts smarter.", "Kong M (2017) A scalable method to analyze gas costs, loops and related security vulnerabilities on the ethereum virtual machine.", "Chen T, Li X, Luo X, Zhang X (2017) Under-optimized smart contracts devour your money.", "Cai Q, Chen J, Luo D, Sun G, Yu H, Guizani M (2024) Deter-pay: A deterministic routing protocol in concurrent payment channel network.", "Liu Y, Li W, Dong X, Ren Z (2025) Resilient formation tracking for networked swarm systems under malicious data deception attacks.", "Zou X, Yuan J, Shilane P, Xia W, Zhang H, Wang X (2022) From hyper-dimensional structures to linear structures: Maintaining deduplicated data’s locality.", "Wood G (2014) Ethereum: A secure decentralised generalised transaction ledger. VERSION efc5f9a 2025-02-04.", "Buterin V (n.a.) Eip-150: Gas cost changes for io-heavy operations.", "Buterin V (n.a.) Eip-160: Exp cost increase.", "Swende MH (n.a.) Eip-1884: Repricing for trie-size-dependent opcodes.", "Buterin V, Swende MH (n.a.) Eip-2929: Gas cost increases for state access opcodes.", "Buterin V, Swende MH (n.a.) Eip-3529: Reduction in refunds.", "Buterin V, Conner E, Dudley R, Slipper M, Norden I, Bakhta A (n.a.) Fee market change for eth 1.0 chain.", "Ethereum G (2023) Go ethereum.", "Wessling F, Ehmke C, Hesenius M, Gruhn V (2018) How much blockchain do you need? towards a concept for building hybrid dapp architectures.", "Makridakis S et al. (1982) The accuracy of extrapolation (time series) methods: Results of a forecasting competition.", "Draper NR, Smith H (1998) Applied Regression Analysis.", "Foundation E (2024) History and forks of ethereum.", "Wohlin C et al. (2012) Experimentation in Software Engineering.", "Kruskal WH, Wallis WA (1952) Use of ranks in one-criterion variance analysis.", "Conover WJ (1999) Practical Nonparametric Statistics, 3rd edn.", "Smirnov N (1948) Table for estimating the goodness of fit of empirical distributions.", "Labs O (2023) Arbitrum.", "Labs O (2023) Optimism."]}