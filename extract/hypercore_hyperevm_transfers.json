{"extracted_information": "The provided content details the transfer mechanisms between HyperCore and HyperEVM, with a specific focus on the HYPE token and a contract interface for linking assets.", "specifications": {"HYPE_EVM_Transfer_Address": "0x222..2", "RequestEvmContract_Interface": {"type": "requestEvmContract", "parameters": [{"name": "token", "type": "number", "description": "The token index to link"}, {"name": "address", "type": "address", "description": "The address of the ERC20 contract on the EVM"}, {"name": "evmExtraWeiDecimals", "type": "number", "range": "[-2, 18] inclusive", "description": "The difference in Wei decimals between Core and EVM spot. E.g., Core PURR has 5 weiDecimals but EVM PURR has 18, so this would be 13."}]}}, "pricing": {}, "features": [{"name": "HYPE Token Transfer", "description": "HYPE is the native gas token on HyperEVM. It is received on the EVM side as the native gas token, not an ERC20. To transfer HYPE back to HyperCore, it can be sent as a transaction value to the EVM transfer address `0x222..2`. This address is a system contract that emits an `event Received(address indexed user, uint256 amount)` via its payable `receive()` function. The `user` is `msg.sender`, allowing both smart contracts and EOAs to transfer HYPE back to HyperCore. There is a small gas cost for emitting this log on the EVM side.", "details": {"token_type": "Native gas token on HyperEVM", "transfer_mechanism_to_core": "Send as transaction value to EVM transfer address", "EVM_transfer_address_contract_type": "System contract", "event_emitted": "Received(address indexed user, uint256 amount)", "event_parameter_user": "msg.sender", "supported_senders": "Smart contracts and EOAs (Externally Owned Accounts)", "associated_cost": "Small gas cost for emitting the log"}}, {"name": "Linking Core and EVM Spot Assets", "description": "A mechanism defined by the `RequestEvmContract` interface allows for linking a token on HyperCore to its corresponding ERC20 contract on HyperEVM. This involves specifying the token index, the ERC20 contract address, and the decimal difference between the Core and EVM representations of the asset.", "details": {"interface_name": "RequestEvmContract", "purpose": "To link a token index from Core to an ERC20 contract address on EVM", "parameters_required": ["token (index)", "address (ERC20 contract on EVM)", "evmExtraWeiDecimals (difference in Wei decimals)"]}}], "statistics": {}, "temporal_info": {}, "geographical_data": {}, "references": []}