{"extracted_information": "The OpenAI JavaScript/TypeScript library provides convenient access to the OpenAI REST API. It is generated from OpenAI's OpenAPI specification using Stainless. The SDK supports various features including different API endpoints, streaming responses, file uploads, webhook verification, and real-time communication via WebSockets.", "specifications": {"language_support": "TypeScript, JavaScript", "typescript_version": ">= 4.9", "supported_runtimes": ["Node.js 20 LTS or later (non-EOL)", "Deno v1.28.0 or higher", "Bun 1.0 or later", "Cloudflare Workers", "Vercel Edge Runtime", "Jest 28 or greater (with \"node\" environment)", "Nitro v2.6 or greater", "Web browsers (requires `dangerouslyAllowBrowser` to be true)"], "default_retries": {"count": 2, "conditions": ["Connection errors", "408 Request Timeout", "409 Conflict", "429 Rate Limit", ">=500 Internal errors"], "mechanism": "Short exponential backoff"}, "default_timeout": {"duration_minutes": 10, "error_type": "APIConnectionTimeoutError"}}, "pricing": {}, "features": [{"name": "API Access", "details": "Convenient access to OpenAI REST API. Primary APIs include Responses API and Chat Completions API."}, {"name": "Type Safety Implementation", "details": "The library is a TypeScript/JavaScript library, generated from an OpenAPI specification, which inherently supports strong typing. Examples show the use of `@ts-expect-error` for undocumented parameters, indicating strict type checking. Requires TypeScript >= 4.9."}, {"name": "Streaming Patterns", "details": "Supports streaming responses using Server Sent Events (SSE) via `for await...of` loops. Also provides a Beta Realtime API for low-latency, multi-modal conversational experiences (text, audio, function calling) using `WebSocket` connections (via `OpenAIRealtimeWebSocket`)."}, {"name": "File Uploads", "details": "Supports various forms for file uploads: `File` objects, `fetch` `Response`, `fs.ReadStream`, and `toFile` helper."}, {"name": "Webhook Verification", "details": "Optional but encouraged. Methods `client.webhooks.unwrap()` for parsing and verifying, and `client.webhooks.verifySignature()` for signature verification only. Requires raw JSON string for body."}, {"name": "Error Handling", "details": "Throws subclasses of `APIError` for connection issues or non-success API responses (4xx, 5xx). Specific error types include `BadRequestError` (400), `AuthenticationError` (401), `PermissionDeniedError` (403), `NotFoundError` (404), `UnprocessableEntityError` (422), `RateLimitError` (429), `InternalServerError` (>=500), `APIConnectionError` (N/A)."}, {"name": "Request IDs", "details": "All object responses include a `_request_id` property from the `x-request-id` response header for debugging. Accessible directly or via `.withResponse()`."}, {"name": "Auto-pagination", "details": "List methods support `for await...of` for iterating through items across all pages. Manual pagination methods (`hasNextPage()`, `getNextPage()`) are also available."}, {"name": "Microsoft Azure OpenAI Integration", "details": "Dedicated `AzureOpenAI` class for use with Azure OpenAI, supporting Azure AD token providers."}, {"name": "Advanced Usage", "details": "Includes access to raw `Response` data via `.asResponse()` or `.withResponse()`, configurable logging (debug, info, warn, error, off; with custom logger support), making custom/undocumented requests (via `client.get`, `client.post`, etc.), and customizing `fetch` client and options (e.g., proxy configurations for Node, Bun, Deno)."}, {"name": "Semantic Versioning", "details": "Generally follows SemVer, with some backwards-incompatible changes potentially released as minor versions if they affect only static types, internal library components not intended for external use, or are not expected to impact most users."}, {"name": "Browser Support", "details": "Disabled by default; requires `dangerouslyAllowBrowser: true` due to security risks of exposing API credentials in client-side code. Recommended only for internal tools, public APIs with limited scope, or temporary development/debugging."}], "statistics": {}, "temporal_info": {}, "geographical_data": {}, "references": ["https://github.com/openai/openai-openapi (OpenAPI specification)", "https://stainlessapi.com/ (Stainless)", "https://platform.openai.com/docs/api-reference (OpenAI API Reference)", "https://platform.openai.com/docs (OpenAI Documentation)", "https://jsr.io/@openai/openai (JSR package)", "https://jsr.io/docs/using-packages#importing-with-jsr-specifiers (JSR specifiers documentation)", "/openai/openai-node/blob/master/api.md (Full API documentation)", "https://github.com/openai/openai-node/tree/master/examples (Code examples)", "https://platform.openai.com/docs/api-reference/responses (Responses API documentation)", "https://platform.openai.com/docs/api-reference/chat (Chat Completions API documentation)", "https://platform.openai.com/docs/guides/webhooks (Webhook API documentation)", "https://platform.openai.com/docs/api-reference/debugging-requests (Debugging requests documentation)", "/openai/openai-node/blob/master/realtime.md (Realtime API documentation)", "https://learn.microsoft.com/azure/ai-services/openai/overview (Azure OpenAI overview)", "/openai/openai-node/blob/master/azure.md (Azure API support documentation)", "https://www.npmjs.com/package/pino (pino logger)", "https://www.npmjs.com/package/winston (winston logger)", "https://www.npmjs.com/package/bunyan (bunyan logger)", "https://www.npmjs.com/package/consola (consola logger)", "https://www.npmjs.com/package/signale (signale logger)", "https://jsr.io/@std/log (@std/log logger)", "https://github.com/nodejs/undici/blob/main/docs/docs/api/ProxyAgent.md#example---proxyagent-with-fetch (Node.js undici proxyAgent docs)", "https://bun.sh/guides/http/proxy (Bun proxy docs)", "https://docs.deno.com/api/deno/~/Deno.createHttpClient (Deno createHttpClient docs)", "https://semver.org/spec/v2.0.0.html (Semantic Versioning conventions)", "https://www.github.com/openai/openai-node/issues (GitHub issues)", "https://endoflife.date/nodejs (Node.js EOL dates)", "/openai/openai-node/blob/master/CONTRIBUTING.md (Contributing documentation)"]}