{"extracted_information": "The provided web content details Ethereum Virtual Machine (EVM) traces, their utility in debugging, and methods for retrieving them. EVM traces offer detailed runtime data for each transaction step, including gas usage, results, and error values. Unlike transaction receipts and state, traces are not inherently part of the blockchain and are not persisted on most nodes due to being resource-intensive and time-consuming.", "specifications": {"evm_trace_data_points": ["Gas used", "Result values", "Error values"], "trace_types": {"CALL": "Indicates when a smart contract transfers Ether or invokes another contract's method.", "CREATE": "Indicates when a smart contract is deployed to the Ethereum network (by EOA or another contract).", "SELFDESTRUCT": "Indicates a contract being removed from the blockchain.", "REWARD": "Indicates rewards to miners."}}, "pricing": {}, "features": [{"name": "Debugging Errors", "description": "When a transaction reverts, the receipt only shows status. Traces are the only way to examine the cause of failure, providing granular details beyond the transaction receipt.", "example_link": "https://etherscan.io/vmtrace?txhash=0xda8c0b80d8e240a83c8f6b067c4656babeb13e8e0ece4fd4292aa06252f1285c&type=parity#raw"}, {"name": "Monitoring Internal Calls/Transfers", "description": "Smart contract interactions (e.g., calling other contracts, transferring Ether, airdropping tokens) are not recorded on the blockchain as transactions. Traces are essential to observe these activities, especially when events are not emitted or logged.", "common_operations_monitored": ["Contract calling another contract (CALL)", "Contract deploying another contract (CREATE)"]}], "statistics": {}, "temporal_info": {}, "geographical_data": {}, "references": [{"title": "Etherscan runs an instrumented EVM", "url": "https://etherscan.io/vmtrace?txhash=0xda8c0b80d8e240a83c8f6b067c4656babeb13e8e0ece4fd4292aa06252f1285c&type=parity#raw"}, {"title": "Parity VM trace - CALL", "url": "https://etherscan.io/vmtrace?txhash=0x0d13800319458a403500d407226328bbedbd8a10ff3d26a18c67872ac1f94ea7&type=parity#raw"}, {"title": "Parity VM Trace - CREATE", "url": "https://etherscan.io/vmtrace?txhash=0xc5454999500f63794d593f2c995943ab0e8697dc9b2f61062ead1d875fdd0921&type=parity#raw"}], "retrieval_methods": [{"method": "Replaying the transaction in a full/archive node", "description": "Ethereum clients provide methods to rerun a transaction to collect traces. This avoids the need for nodes to store traces, as long as sufficient information for execution is available.", "relevance_to_query": "Directly relates to transaction replay techniques."}, {"method": "Running an archive node with traces enabled", "description": "Some Ethereum clients allow running nodes with tracing enabled, which stores traces for quicker retrieval. This incurs higher costs and slower node performance.", "drawback": "Higher costs and slower node performance."}, {"method": "Using APIs (Third-party services)", "description": "Services like Infura or Alchemy manage trace-enabled nodes and offer API endpoints for trace collection. Simplest method, but relies on centralized entities.", "examples": ["Infura", "Alchemy"], "drawback": "Reliance on centralized entity."}], "why_traces_not_stored_by_default": "Tracing is time-consuming and resource-intensive, requiring significant storage and retrieval capabilities. It can reduce a node's ability to sync blockchain history. Since traces are not required for block validation or mining, most nodes operate without tracing enabled."}