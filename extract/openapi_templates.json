{"extracted_information": "Detailed information about OpenAPI Generator's templating system, customization options, and multi-language consistency patterns.", "specifications": {"templating_system_overview": "OpenAPI Generator uses templates, primarily Mustache, to generate code from a normalized OpenAPI model. Beginning with version 4.0.0, experimental Handlebars and user-defined template engines via plugins are supported. Templates can be modified for custom code generation for approximately 90% of use cases.", "template_application_methods": [{"tool": "CLI", "option": "-t/--template"}, {"tool": "Maven Plugin", "option": "templateDirectory"}, {"tool": "Gradle Plugin", "option": "templateDir"}], "template_sources": ["Local files", "Classpath-defined templates"], "template_override_order": ["User customized library path (e.g., custom_template/libraries/feign/model.mustache)", "User customized generator top-level path (e.g., custom_template/model.mustache)", "Embedded library path (e.g., resources/Java/libraries/feign/model.mustache)", "Embedded top-level path (e.g., resources/Java/model.mustache)", "Common embedded path (e.g., resources/_common/model.mustache)"], "data_structures_for_templates": {"operations": {"description": "Represents all operations defined in the OpenAPI specification.", "details": "A single API file is created for each `OperationGroup`. Multiple files can be generated per operation group (e.g., .h and .m for C-like languages). Debugging: `--global-property debugOpenAPI=true`."}, "models": {"description": "Each model identified within the OpenAPI spec generates a new model file.", "details": "Provides detailed information about the model type and its properties (e.g., `vars`, `requiredVars`, `optionalVars`, `readOnlyVars`, `readWriteVars`, `allVars`). Debugging: `--global-property debugModels=true`."}, "supportingFiles": {"description": "A 'catch-all' structure providing the entire API document structure (operations, models, etc.).", "details": "Can be processed through the templating engine or copied as-is. Debugging: `--global-property debugSupportingFiles=true`."}}, "mustache_variables_examples": [{"name": "complexType", "description": "Stores the name of the model (e.g., Pet)."}, {"name": "isContainer", "description": "True if the parameter or property is an array or a map."}, {"name": "isPrimitiveType", "description": "True if the parameter or property type is a primitive type (e.g., string, integer, etc.)."}], "mustache_lambdas": ["lowercase", "uppercase", "snakecase", "titlecase", "kebabcase", "pascalcase", "camelcase", "uncamelize", "forwardslash", "backslash", "doublequote", "indented", "indented_8", "indented_12", "indented_16"]}, "features": [{"name": "Template Modification", "description": "Allows users to directly modify existing Mustache template files to customize generated code. This involves copying and altering templates from the generator's resource directory. This method is primarily for overriding existing templates, not creating entirely new generators.", "example": "Adding AOP logic using jcabi-aspects to a Java client template."}, {"name": "Custom Template Engine Support", "description": "An experimental feature (from v4.0.0+) enabling users to integrate and use custom templating engines beyond the default Mustache or experimental Handlebars. Requires implementing the `TemplatingEngineAdapter` interface.", "example": "Creating a Pebble template adapter in Kotlin."}, {"name": "Vendor Extensions (Specification Extensions)", "description": "Supports `x-` prefixed properties within the OpenAPI specification to provide vendor-specific or custom configurations directly in the API document. These extensions allow for fine-grained control and customization tailored to specific languages or tooling.", "examples": [{"extension": "x-enum-varnames", "scope": "All generators (core)", "purpose": "Define custom enum item names."}, {"extension": "x-enum-descriptions", "scope": "All generators (core)", "purpose": "Provide individual descriptions for enum values."}, {"extension": "x-objc-operationId", "scope": "ObjC", "purpose": "Customize method names for Objective-C."}, {"extension": "x-accepts", "scope": "Java (Feign)", "purpose": "Specify a single 'Accepts' header value."}, {"extension": "x-content-type", "scope": "Java (Feign)", "purpose": "Specify a single 'Content-Type' header value."}, {"extension": "x-response-id", "scope": "Rust-server", "purpose": "Name corresponding enum variants in code."}, {"extension": "x-mysqlSchema", "scope": "MySQL Schema", "purpose": "Define table and column properties for MySQL schema generation."}]}], "consistency_patterns": [{"pattern": "Normalized API Model", "description": "OpenAPI 2.0 and 3.x documents are internally normalized into a single, consistent API model. This unified model serves as the common data source for all language-specific generators and their templates, fostering cross-language consistency.", "context": "All generators operate on this standardized internal representation, ensuring a consistent interpretation of the API contract regardless of the target language."}, {"pattern": "Core Generator Logic (`CodegenConfig.java`)", "description": "Generators implement `CodegenConfig.java` (often by extending `DefaultCodegen.java`), which provides a foundational structure for code generation logic. This standardized interface promotes a consistent approach to generator development across different languages.", "context": "This shared base allows for consistent handling of common tasks while enabling language-specific transformations for advanced support."}, {"pattern": "Template Reuse through Library Option", "description": "The `library` option allows for defining base templates and applying library-specific overrides. This enables template reuse for different libraries or frameworks within the same programming language.", "context": "This modularity helps maintain consistency in code generation patterns for different variations within a single language."}, {"pattern": "Vendor Extensions for Structured Customization", "description": "Vendor extensions provide a structured and standardized way to embed language-specific configurations directly within the OpenAPI specification. This allows for targeted customizations without breaking the core specification.", "context": "While enabling specific language adaptations, these extensions are part of the common specification, contributing to a consistent, extensible framework for multi-language generation."}]}