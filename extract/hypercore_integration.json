{"extracted_information": "Hyperliquid's dual architecture combines HyperCore (high-performance trading engine) and HyperEVM (EVM compatibility) to allow direct access to HyperCore's real-time price feeds from HyperEVM dApps without external oracles. This integration is achieved through HyperEVM's precompile contracts, which expose HyperCore functionalities to Solidity smart contracts via static calls. The `L1Read.sol` interface is central to this cross-layer interaction, enabling the fetching and conversion of oracle prices.", "specifications": {"architecture_overview": {"hypercore": "High-performance trading engine, handles fully onchain order book with sub-second finality. Uses HyperBFT consensus (one-block finality, up to 200,000 orders/sec).", "hyperevm": "Ethereum-compatible smart contract environment integrated into Hyperliquid ecosystem, allowing developers to build on HyperCore's data."}, "precompile_interaction": {"mechanism": "HyperCore functionality exposed via precompiles (special contracts at predefined addresses). HyperEVM contracts query data using static calls directly to these precompiles.", "l1read_contract": {"purpose": "A Solidity interface (`L1Read.sol`) provided by Hyperliquid to simplify interaction with HyperCore precompiles from HyperEVM.", "functions_for_prices": [{"name": "oraclePx(uint32 index)", "description": "Returns the oracle price of a perpetual futures contract.", "precompile_address": "0x0000000000000000000000000000000000000807 (ORACLE_PX_PRECOMPILE_ADDRESS)", "input": "uint32 index (token index)", "output": "uint64 (raw price)"}, {"name": "perpAssetInfo(uint32 index)", "description": "Returns metadata of a perpetual futures contract (e.g., coin name, szDecimals).", "precompile_address": "0x000000000000000000000000000000000000080a (PERP_ASSET_INFO_PRECOMPILE_ADDRESS)", "input": "uint32 index (perp index)", "output": "PerpAssetInfo struct (coin, marginTableId, szDecimals, maxLeverage, onlyIsolated)"}], "other_precompile_addresses": {"POSITION_PRECOMPILE_ADDRESS": "0x0000000000000000000000000000000000000800", "SPOT_BALANCE_PRECOMPILE_ADDRESS": "0x0000000000000000000000000000000000000801", "VAULT_EQUITY_PRECOMPILE_ADDRESS": "0x0000000000000000000000000000000000000802", "WITHDRAWABLE_PRECOMPILE_ADDRESS": "0x0000000000000000000000000000000000000803", "DELEGATIONS_PRECOMPILE_ADDRESS": "0x0000000000000000000000000000000000000804", "DELEGATOR_SUMMARY_PRECOMPILE_ADDRESS": "0x0000000000000000000000000000000000000805", "MARK_PX_PRECOMPILE_ADDRESS": "0x0000000000000000000000000000000000000806", "SPOT_PX_PRECOMPILE_ADDRESS": "0x0000000000000000000000000000000000000808", "L1_BLOCK_NUMBER_PRECOMPILE_ADDRESS": "0x0000000000000000000000000000000000000809", "SPOT_INFO_PRECOMPILE_ADDRESS": "0x000000000000000000000000000000000000080b", "TOKEN_INFO_PRECOMPILE_ADDRESS": "0x000000000000000000000000000000000000080C"}}}, "token_index_formatting": {"retrieval": "Via Hyperliquid API endpoint (e.g., `https://api.hyperliquid.xyz/info` with `{\"type\": \"meta\"}` payload). Token indexes differ for mainnet/testnet.", "format_for_calls": "Convert to hexadecimal, prefix with `0x`, pad to 32 bytes (64 hex characters) with leading zeros. E.g., Decimal 5 -> 0x00...0005."}, "price_conversion_logic": {"raw_price_interpretation": "Raw price is returned from `oraclePx`. `szDecimals` (from `perpAssetInfo`) determines the number of significant digits. The actual price is `raw_price / 10^(6 - szDecimals)`.", "conversion_to_18_decimals_in_solidity": "To convert `rawPrice` to 18 decimals (standard EVM representation): `(uint256(rawPrice) * 1e18) / (10 ** (6 - szDecimals))`."}, "development_environment": {"tooling": "Foundry (toolkit for EVM smart contract development)", "network_endpoints": {"testnet_rpc": "https://rpc.hyperliquid-testnet.xyz/evm", "mainnet_rpc": "https://rpc.hyperliquid.xyz/evm (or dedicated QuickNode endpoint)"}, "gas_token": "HYPE (native token on Hyperliquid), obtainable from testnet faucet or mainnet purchase, then transferred from HyperCore perps -> HyperCore spot -> HyperEVM via Hyperliquid UI."}}, "features": [{"name": "Direct Queries with Foundry's `Cast`", "description": "Allows quick interaction with HyperCore's precompiles directly from the terminal without deploying a smart contract.", "usage": "Use `cast call <precompile_address> <padded_token_index> --rpc-url <rpc_url>`. Output is hex, convertible to decimal using `cast --to-dec`."}, {"name": "Smart Contract Interaction (`PriceOracleReader.sol`)", "description": "Enables onchain fetching and processing of HyperCore oracle prices for dApps.", "capabilities": ["Inherits `L1Read.sol` for direct precompile access.", "`updatePrice(uint32 perpIndex)`: Fetches raw price via `oraclePx`, retrieves `szDecimals` via `perpAssetInfo`, converts the price to 18 decimals, stores it, and emits a `PriceUpdated` event.", "`getLatestPrice(uint32 perpIndex)`: Returns the last stored converted price for a given asset index.", "Maintains mappings for `latestPrices` and `assetNames`."]}], "statistics": {}, "temporal_info": {}, "geographical_data": {}, "references": ["https://hyperliquid.gitbook.io/hyperliquid-docs", "https://hyperliquid.gitbook.io/hyperliquid-docs/hypercore", "https://hyperliquid.gitbook.io/hyperliquid-docs/hyperevm", "https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/hyperevm/interacting-with-hypercore", "https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/api/tick-and-lot-size", "https://www.quicknode.com/guides/ethereum-development/smart-contracts/intro-to-foundry", "https://www.quicknode.com/guides/tags/solidity", "https://www.quicknode.com/signup", "https://app.hyperliquid-testnet.xyz/drip", "https://www.hyperliquid.org/", "https://www.quicknode.com/guides/web3-fundamentals-security/security/secure-private-keys-with-encrypted-secrets", "https://docs.ethers.org/", "https://viem.sh/", "https://www.quicknode.com/guides/tags/ethers-js", "https://www.quicknode.com/guides/tags/viem", "https://www.quicknode.com/guides/tags/hyperliquid", "https://www.quicknode.com/docs/hyperliquid", "https://book.getfoundry.sh/", "https://www.youtube.com/watch?v=lPQw3tJJs_A", "https://discord.gg/quicknode", "https://twitter.com/QuickNode", "https://t.me/quicknodehq"]}