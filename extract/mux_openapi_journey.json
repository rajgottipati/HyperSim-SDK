{"extracted_information": "Mux embarked on an \"adventure\" to implement OpenAPI V3 for SDK code generation to scale their SDK offerings efficiently. They aimed to grow from two SDKs (Node.js, Elixir) at the end of 2018 to over 10 languages by the end of 2019. They chose code generation over manual development due to its efficiency for a small company, drawing inspiration from large corporations like Google and AWS who use similar methods with closed-source toolchains. Mux adopted OpenAPI, standardizing REST API definitions, especially following the release of OpenAPI V3 in July 2017, valuing its active community and powerful toolchains. They found OpenAPI V3's polymorphism support crucial for their API structure. Their first generated SDK was `mux-python`.", "specifications": {"OpenAPI_V3_Release_Date": "July 2017", "Mux_SDK_Goal_2019": "Over 10 languages", "Mux_Initial_SDKs_2018": ["mux-node-sdk", "mux-elixir"], "mux-python_Generated_Code_Percentage": "Around 98%", "OpenAPI_Documentation_Size": "93 page, 15,000 word document"}, "pricing": {}, "features": [{"name": "Mux API Structure", "description": "Consistent pattern with path layout and response format. Successful requests return JSON where objects are in a `data` key, allowing flexibility for future metadata without changing fundamental return type. This design is borrowed from standards like JSON:API.", "impact_on_generated_sdks": "Leads to wrapper objects (e.g., `ListAssetsResponse` with a `data` field) in generated SDKs, potentially tripping up new developers."}], "statistics": {}, "temporal_info": {"published_date": "February 20, 2019", "open_api_v3_release": "July 2017", "sdk_goals_timeline": "End of 2018 (2 SDKs) to end of 2019 (10+ SDKs)"}, "geographical_data": {}, "references": [], "architecture_decisions": {"approach_to_sdk_development": "Code generation via OpenAPI V3 (versus manual development)", "toolchain_components": [{"name": "swagger-cli", "usage": ["Validate OpenAPI YAML files (against specification)", "Bundle multiple OpenAPI YAML files linked by `$ref` into a single JSON file."], "observations": "Pre-dates OpenAPI spec, updated for V3. `bundle` operation does not `validate` first (observed as a point of contention by Mux)."}, {"name": "ReDoc", "usage": "Generate static API documentation sites from OpenAPI definitions.", "observations": "Displays examples effectively. Validation is 'incredibly relaxed', which initially misled Mux about their OpenAPI file validity for other tools."}, {"name": "OpenAPI Generator", "role": "Core tool for generating client/server side code.", "details": "Comprehensive Java application, supports over 20 languages for client-side SDKs. Utilizes Mustache templates (for code generation) and Generator Classes (Java classes defining language-specific behavior).", "observations": "Documentation can be inconsistent, error messaging difficult. Large Java codebase (~20,000 lines) with abstract classes/inheritance makes debugging challenging. Customization via template extraction is simple, but modifying business logic requires forking the codebase.", "components": [{"name": "Mustache Templates", "description": "Core of code generation, substitutes values from OpenAPI descriptions into template files. Flexible for customization by extracting templates."}, {"name": "Generator Classes (Java)", "description": "Define behavior for code generation per language/framework, deciding which templates to load. Contains much of the business logic."}]}, {"name": "Mermade openapi-codegen", "role": "Alternative code generation tool.", "details": "Node.js implementation, simpler and more minimal than OpenAPI Generator. Uses same Mustache templates but JavaScript for language behaviors.", "observations": "Templates often fall out of sync with OpenAPI Generator versions."}], "toolchain_flow": "OpenAPI YAML (multi-file) -> `swagger-cli bundle` (single JSON) -> OpenAPI Generator -> Generated SDKs", "decision_on_api_structure_in_sdks": "To accurately represent Mux API (which uses a `data` wrapper), generated SDKs will mirror this structure (e.g., `response.data`). This was chosen over hiding the `data` element to maintain API accuracy for future toolchain integration (server-side stubs, documentation) and to gather user feedback before modifying behavior."}, "challenges": [{"name": "Inconsistent Tooling Support for OpenAPI V3", "description": "Tooling has varying levels of specification adherence (strict vs. lax). No single tool could correctly validate Mux's OpenAPI definitions.", "examples": ["ReDoc's relaxed validation created a false sense of security regarding specification compliance.", "OpenAPI Generator did not handle `$ref` parameters well, requiring bundling.", "OpenAPI Generator 4 introduced a breaking change regarding `$ref` validation due to an updated `swagger-parser`."], "solutions": ["Reliance on multiple validation tools.", "Building a custom validator.", "Using `swagger-cli combine` to bundle OpenAPI files into a single JSON before feeding to OpenAPI Generator.", "Temporarily disabling validation in OpenAPI Generator 4 when `swagger-parser` issue was present."]}, {"name": "Inconsistent Polymorphism Support in OpenAPI Generator", "description": "OpenAPI V3 features like `oneOf`/`anyOf` (for polymorphism) were not fully supported across languages/frameworks in OpenAPI Generator.", "details": "OpenAPI Generator V3 lacked support; V4 betas added core support, but not consistently implemented across all target languages.", "solution": "Exposed the most comprehensive version of each API call to ensure all Mux features were accessible in the SDKs until full polymorphism support is available."}, {"name": "OpenAPI Generator Falls Back to Inline Types", "description": "OpenAPI Generator issues warnings like 'type 'X' has no mapping and will be rendered inline' when models are not properly defined or aliased.", "impact": "Generates 'impenetrable' code that is not user-friendly, deemed a 'fatal error' by Mux.", "cause": "Violation of OpenAPI specification where validation tools often fail to catch missing references.", "solutions": ["Added type alias checking in Mux's custom validator to ensure all object/API/parameter schemas are correctly aliased.", "Checking the generated output for the word 'Inline' in a wrapper shell script, failing the generation process if found."]}, {"name": "`$refs` Limitations", "description": "OpenAPI V3 limits where `$ref` can be used (e.g., not directly under `paths`), making modularization of large APIs challenging.", "impact": ["Lack of a definitive list of allowed `$ref` locations increases barrier to entry.", "Forces `index.yaml` to be very large, containing all HTTP API calls directly instead of being able to reference external files for each endpoint."], "example_impact": "Mux's `index.yaml` has over 40 lines just for `/video` APIs, due to inability to `$ref` single files for each endpoint.", "solution": "Developed a specific directory structure for OpenAPI YAML repository, enforcing it with a custom validator (e.g., `index.yaml` aliases models from `components/schemas` to deeper files; `video/api/v1/` contains files per top-level endpoint; `schemas` directory for fundamental types and API request/response patterns)."}, {"name": "Generated SDKs Closely Match API Structure", "description": "Mux's API returns objects within a `data` key (JSON:API style). Generated SDKs mirror this, creating wrapper objects (e.g., `ListAssetsResponse.data`) that might confuse new developers.", "consideration_for_change": "Considered manipulating OpenAPI Generator's output or adding middleware to unwrap responses.", "decision": "Decided not to hide the `data` element. Reasons: investment in OpenAPI toolchain (accurate representation for server-side stubs), gauging actual user issues, and relying on good documentation and examples to mitigate confusion."}], "solutions_and_workarounds": ["Building a custom OpenAPI validator for Mux's specific needs, including type alias checking.", "Using `swagger-cli bundle` to combine modularized OpenAPI definitions for tools like OpenAPI Generator that struggle with `$ref`.", "Implementing checks for 'Inline' types in the generated code output to prevent unusable SDKs.", "Adopting a strict, enforced directory structure for OpenAPI YAML files to manage modularity despite `$ref` limitations.", "Customizing generated SDKs for better user experience (e.g., improved exception handling, custom READMEs, concise file headers).", "Decision to expose comprehensive API calls when polymorphism support was partial.", "Choosing to accurately represent the API's `data` wrapper in SDKs, betting on good documentation over hiding API structure."], "future_plans": ["Publish combined OpenAPI JSON definitions.", "Generate SDKs for more languages.", "Open source their custom validator or contribute to community validators.", "Seek community consensus on best practices for OpenAPI repository layout.", "Further refine API to SDK/wrapper mapping for JSON:API style APIs.", "Add helper methods (e.g., signing URLs) to SDKs.", "Add support for Mux `/data`.", "Improve development workflow to start from OpenAPI definitions and generate API stubs before product development."]}