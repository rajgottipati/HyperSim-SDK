{"extracted_information": "The content details critical vulnerabilities in web3 transaction simulation, focusing on a flaw in Blowfish's service used by Phantom wallet that failed to detect Solana's `assign` instruction, allowing stealthy account ownership transfers and user interface (UX) manipulation. Key security challenges include simulation detection attacks, single points of failure due to outsourcing, and the necessity for robust fallback mechanisms. Analysis involved identifying the specific `assign` instruction oversight, demonstrating a Proof-of-Concept (PoC) with a malicious Solana program, and following a formal disclosure timeline for remediation.", "specifications": {"solana_account_model": "Accounts have ownership, by default owned by Solana's `System Program`. The `assign` instruction allows transfer of account ownership to a smart contract.", "vulnerability_mechanism": "Blowfish's transaction simulation (used by Phantom) failed to detect the `SystemProgram.assign` instruction. This led to misrepresentation in the wallet's UX, displaying 'no changes detected' or only beneficial transfers (e.g., 'Receive 1 SOL') while a critical ownership transfer occurred, creating a false sense of security.", "proof_of_concept_technical_details": {"malicious_smart_contract_logic": "A Solana program (written in Rust-like pseudocode) capable of draining funds from an owned account: `process_instruction` checks if the `owned_account` belongs to the `program_id`, then directly deducts `lamports` from `owned_account.lamports` and adds them to `owner.lamports`, bypassing Solana's minimum rent fees.", "attack_stages": ["Deployment of a smart contract containing logic to deduct funds from the victim's account and add to the attacker's account.", "Transaction engineered to include a perceived benefit (e.g., '1 SOL' donation) and concurrently an `assign` instruction transferring ownership from the victim's account to the attacker-controlled smart contract. This transaction is signed by the victim's private key.", "At an opportune time, the attacker calls the malicious contract to drain all funds from the victim's newly-owned wallet."], "attack_characteristics": "Requires no interaction with smart contracts (for the `assign` part of the initial transaction), but can be detected by contract scanning tools. Higher impact than simulation detection attacks."}}, "pricing": {}, "features": [{"name": "Transaction Decoding & Display", "description": "Wallets are expected to decode transactions and display key parameters and data being signed to prevent 'blind signing'.", "failure": "This feature alone is insufficient; users still struggle to analyze transaction impacts from potentially malicious DApps. The simulation failure led to misleading display by hiding critical instructions."}, {"name": "Transaction Simulation (General)", "description": "Simulates transaction execution to analyze effects on blockchain state, validating actions (e.g., token transfers) and alerting users of unexpected changes or malicious activities.", "failure": "Susceptible to 'simulation detection attacks' where malicious contracts detect simulated environments and 'fake good behavior' to bypass protections. When outsourced to third-parties, it creates a 'Single Point of Failure' (SPOF)."}, {"name": "Asset Ownership Change Display", "description": "Simulation results should be used to clearly show crypto asset ownership changes in a user-friendly way.", "failure": "Blowfish/Phantom simulation critically failed to detect and display `Solana.SystemProgram.assign` instruction, allowing stealthy ownership transfers to remain hidden. This allowed manipulation of the wallet's UX to show false positive outcomes (e.g., 'Receive 1 SOL')."}, {"name": "Fallback Mechanism for Simulation Failure", "description": "Wallets should have a backup plan to display full transaction details if simulation fails.", "failure": "Phantom had no backup plan, leading to incomplete or misleading transaction details being displayed to the user."}], "statistics": {}, "temporal_info": {"vulnerability_reported": "April 5", "vulnerability_confirmed": "April 6", "fix_deployed_and_validated": "April 7", "blog_post_publication_date": "May 11, 2023"}, "geographical_data": {}, "references": [{"name": "Blowfish", "url": "https://blowfish.xyz/", "description": "Web3 security infrastructure provider"}, {"name": "Phantom", "url": "https://phantom.app/", "description": "Affected wallet, user of Blowfish's service"}, {"name": "Opcodes Research on Transaction Simulation Detection", "url": "https://web.archive.org/web/20220916160633/https://opcodes.fr/publications/2022-01/detecting-transaction-simulation"}, {"name": "ZenGo Research - The Red Pill Attack", "url": "https://zengo.com/zengo-uncovers-security-vulnerabilities-in-popular-web3-transaction-simulation-solutions-the-red-pill-attack/"}, {"name": "Alchemy", "url": "https://www.alchemy.com/overviews/transaction-simulation", "description": "Another 3rd-party transaction simulation provider"}, {"name": "Solana Account Model Documentation", "url": "https://docs.solana.com/developing/programming-model/accounts"}, {"name": "Solana System Program Documentation", "url": "https://docs.solana.com/developing/runtime-facilities/programs"}, {"name": "Solana Web3.js - SystemProgram.assign", "url": "https://solana-labs.github.io/solana-web3.js/classes/SystemProgram.html#assign"}, {"name": "Solana Web3.js - SystemProgram.transfer", "url": "https://solana-labs.github.io/solana-web3.js/classes/SystemProgram.html#transfer"}, {"name": "Solana Rent Fees Documentation", "url": "https://docs.solana.com/developing/intro/rent"}, {"name": "Brave Browser Issue (related)", "url": "https://github.com/brave/brave-browser/issues/30059", "description": "Another Solana wallet considering Blowfish solution"}, {"name": "Example Attack Transaction 1", "url": "https://explorer.solana.com/tx/5CmYuKvdGnsK2pTqku8NHNxnMTb4GuCD9wDBxWPBx9zS2TjkoCFKhhJVhMH7EunqXPo7Br7kjBjtdiw57YA"}, {"name": "Victim's Account Address (PoC)", "url": "https://explorer.solana.com/address/BcrJgWAKXVPVkwdphPPHmXsNFTApcqhirAbJjxSZzizM"}, {"name": "Attacker's Smart Contract Address (PoC)", "url": "https://explorer.solana.com/address/A3mayAzsbd4H1YFnLBbafAMxbygXYx56Dq2jKupWczM9"}, {"name": "Example Attack Transaction 2 (Drain)", "url": "https://explorer.solana.com/tx/3KMVJMMEv4vuXktWLR3iFtRrpw6G37yakXrnSptmk5WUC3jJ4H9AL34gAcsCJrjSgv4fnQrSiCaChskDRbPYTq9y"}, {"name": "Previous Coinspect Blog Post", "url": "https://www.coinspect.com/blog/chainid-eip-712-implementation-issue/", "description": "EIP-712 implementation issue impacting 40+ vendors"}]}