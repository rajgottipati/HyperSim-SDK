package io.hypersim.sdk.core;

import io.hypersim.sdk.types.Network;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.time.Duration;
import java.util.List;
import java.util.Objects;

/**
 * Configuration class for HyperSim SDK initialization.
 * 
 * Provides comprehensive configuration options for all SDK features
 * including network settings, AI capabilities, WebSocket streaming,
 * plugin system, and performance tuning.
 * 
 * @author MiniMax Agent
 * @version 1.0.0
 * @since 1.0.0
 */
public record HyperSimConfig(
    @NotNull Network network,
    boolean aiEnabled,
    @Nullable String openaiApiKey,
    @Nullable String rpcEndpoint,
    @NotNull Duration timeout,
    boolean crossLayerEnabled,
    boolean streamingEnabled,
    @Nullable String wsEndpoint,
    @NotNull List<PluginConfig> plugins,
    boolean debug,
    @NotNull ConnectionPoolConfig connectionPool,
    @NotNull RetryConfig retry,
    boolean metricsEnabled,
    @Nullable String metricsPrefix
) {
    
    /**\n     * Default timeout duration.\n     */\n    public static final Duration DEFAULT_TIMEOUT = Duration.ofSeconds(30);\n    \n    /**\n     * Creates HyperSimConfig with validation.\n     */\n    public HyperSimConfig {\n        Objects.requireNonNull(network, \"Network cannot be null\");\n        Objects.requireNonNull(timeout, \"Timeout cannot be null\");\n        Objects.requireNonNull(plugins, \"Plugins list cannot be null\");\n        Objects.requireNonNull(connectionPool, \"Connection pool config cannot be null\");\n        Objects.requireNonNull(retry, \"Retry config cannot be null\");\n        \n        if (aiEnabled && (openaiApiKey == null || openaiApiKey.trim().isEmpty())) {\n            throw new IllegalArgumentException(\"OpenAI API key required when AI features are enabled\");\n        }\n        \n        if (timeout.toMillis() < 1000) {\n            throw new IllegalArgumentException(\"Timeout must be at least 1 second\");\n        }\n    }\n    \n    /**\n     * Plugin configuration.\n     */\n    public record PluginConfig(\n        @NotNull String name,\n        @NotNull String className,\n        @NotNull java.util.Map<String, Object> config,\n        int priority,\n        boolean enabled\n    ) {\n        public PluginConfig {\n            Objects.requireNonNull(name, \"Plugin name cannot be null\");\n            Objects.requireNonNull(className, \"Plugin class name cannot be null\");\n            Objects.requireNonNull(config, \"Plugin config cannot be null\");\n        }\n    }\n    \n    /**\n     * Connection pool configuration.\n     */\n    public record ConnectionPoolConfig(\n        int maxConnections,\n        @NotNull Duration connectionTimeout,\n        @NotNull Duration idleTimeout,\n        boolean enabled\n    ) {\n        public ConnectionPoolConfig {\n            Objects.requireNonNull(connectionTimeout, \"Connection timeout cannot be null\");\n            Objects.requireNonNull(idleTimeout, \"Idle timeout cannot be null\");\n            \n            if (maxConnections < 1) {\n                throw new IllegalArgumentException(\"Max connections must be positive\");\n            }\n        }\n    }\n    \n    /**\n     * Retry configuration.\n     */\n    public record RetryConfig(\n        int maxAttempts,\n        @NotNull Duration initialDelay,\n        @NotNull Duration maxDelay,\n        double backoffMultiplier,\n        boolean jitter\n    ) {\n        public RetryConfig {\n            Objects.requireNonNull(initialDelay, \"Initial delay cannot be null\");\n            Objects.requireNonNull(maxDelay, \"Max delay cannot be null\");\n            \n            if (maxAttempts < 0) {\n                throw new IllegalArgumentException(\"Max attempts must be non-negative\");\n            }\n            \n            if (backoffMultiplier < 1.0) {\n                throw new IllegalArgumentException(\"Backoff multiplier must be >= 1.0\");\n            }\n        }\n    }\n    \n    /**\n     * Builder for HyperSimConfig.\n     */\n    public static class Builder {\n        private Network network;\n        private boolean aiEnabled = true;\n        private String openaiApiKey;\n        private String rpcEndpoint;\n        private Duration timeout = DEFAULT_TIMEOUT;\n        private boolean crossLayerEnabled = true;\n        private boolean streamingEnabled = false;\n        private String wsEndpoint;\n        private List<PluginConfig> plugins = List.of();\n        private boolean debug = false;\n        private ConnectionPoolConfig connectionPool = createDefaultConnectionPool();\n        private RetryConfig retry = createDefaultRetry();\n        private boolean metricsEnabled = true;\n        private String metricsPrefix;\n        \n        public Builder network(@NotNull Network network) {\n            this.network = Objects.requireNonNull(network);\n            return this;\n        }\n        \n        public Builder aiEnabled(boolean aiEnabled) {\n            this.aiEnabled = aiEnabled;\n            return this;\n        }\n        \n        public Builder openaiApiKey(@Nullable String openaiApiKey) {\n            this.openaiApiKey = openaiApiKey;\n            return this;\n        }\n        \n        public Builder rpcEndpoint(@Nullable String rpcEndpoint) {\n            this.rpcEndpoint = rpcEndpoint;\n            return this;\n        }\n        \n        public Builder timeout(@NotNull Duration timeout) {\n            this.timeout = Objects.requireNonNull(timeout);\n            return this;\n        }\n        \n        public Builder crossLayerEnabled(boolean crossLayerEnabled) {\n            this.crossLayerEnabled = crossLayerEnabled;\n            return this;\n        }\n        \n        public Builder streamingEnabled(boolean streamingEnabled) {\n            this.streamingEnabled = streamingEnabled;\n            return this;\n        }\n        \n        public Builder wsEndpoint(@Nullable String wsEndpoint) {\n            this.wsEndpoint = wsEndpoint;\n            return this;\n        }\n        \n        public Builder plugins(@NotNull List<PluginConfig> plugins) {\n            this.plugins = Objects.requireNonNull(plugins);\n            return this;\n        }\n        \n        public Builder debug(boolean debug) {\n            this.debug = debug;\n            return this;\n        }\n        \n        public Builder connectionPool(@NotNull ConnectionPoolConfig connectionPool) {\n            this.connectionPool = Objects.requireNonNull(connectionPool);\n            return this;\n        }\n        \n        public Builder retry(@NotNull RetryConfig retry) {\n            this.retry = Objects.requireNonNull(retry);\n            return this;\n        }\n        \n        public Builder metricsEnabled(boolean metricsEnabled) {\n            this.metricsEnabled = metricsEnabled;\n            return this;\n        }\n        \n        public Builder metricsPrefix(@Nullable String metricsPrefix) {\n            this.metricsPrefix = metricsPrefix;\n            return this;\n        }\n        \n        public HyperSimConfig build() {\n            return new HyperSimConfig(network, aiEnabled, openaiApiKey, rpcEndpoint,\n                                    timeout, crossLayerEnabled, streamingEnabled, wsEndpoint,\n                                    plugins, debug, connectionPool, retry, metricsEnabled, metricsPrefix);\n        }\n        \n        private static ConnectionPoolConfig createDefaultConnectionPool() {\n            return new ConnectionPoolConfig(\n                20,\n                Duration.ofSeconds(10),\n                Duration.ofMinutes(5),\n                true\n            );\n        }\n        \n        private static RetryConfig createDefaultRetry() {\n            return new RetryConfig(\n                3,\n                Duration.ofSeconds(1),\n                Duration.ofSeconds(30),\n                2.0,\n                true\n            );\n        }\n    }\n    \n    /**\n     * Creates a new builder.\n     * \n     * @return a new Builder instance\n     */\n    public static Builder builder() {\n        return new Builder();\n    }\n    \n    /**\n     * Creates a simple configuration for the given network.\n     * \n     * @param network the target network\n     * @return a basic configuration\n     */\n    public static HyperSimConfig simple(@NotNull Network network) {\n        return builder()\n            .network(network)\n            .aiEnabled(false)\n            .streamingEnabled(false)\n            .build();\n    }\n    \n    /**\n     * Creates a configuration with AI enabled.\n     * \n     * @param network the target network\n     * @param openaiApiKey the OpenAI API key\n     * @return a configuration with AI features enabled\n     */\n    public static HyperSimConfig withAI(@NotNull Network network, @NotNull String openaiApiKey) {\n        return builder()\n            .network(network)\n            .aiEnabled(true)\n            .openaiApiKey(openaiApiKey)\n            .build();\n    }\n    \n    /**\n     * Creates a full-featured configuration.\n     * \n     * @param network the target network\n     * @param openaiApiKey the OpenAI API key\n     * @return a configuration with all features enabled\n     */\n    public static HyperSimConfig fullFeatured(@NotNull Network network, @NotNull String openaiApiKey) {\n        return builder()\n            .network(network)\n            .aiEnabled(true)\n            .openaiApiKey(openaiApiKey)\n            .streamingEnabled(true)\n            .crossLayerEnabled(true)\n            .metricsEnabled(true)\n            .debug(false)\n            .build();\n    }\n}\n