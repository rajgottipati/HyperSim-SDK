package io.hypersim.sdk.types;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.time.Instant;
import java.util.List;
import java.util.Objects;

/**
 * AI-powered insights for simulation results.
 * 
 * Contains comprehensive AI analysis including risk assessment,
 * optimization suggestions, and security warnings.
 * 
 * @author MiniMax Agent
 * @version 1.0.0
 * @since 1.0.0
 */
public record AIInsights(
    @JsonProperty("riskLevel") @NotNull RiskLevel riskLevel,
    @JsonProperty("confidenceScore") double confidenceScore,
    @JsonProperty("gasSavingSuggestions") @NotNull List<String> gasSavingSuggestions,
    @JsonProperty("securityWarnings") @Nullable List<String> securityWarnings,
    @JsonProperty("optimizationTips") @NotNull List<String> optimizationTips,
    @JsonProperty("failurePrediction") @NotNull FailurePrediction failurePrediction,
    @JsonProperty("marketImpactAnalysis") @Nullable MarketImpactAnalysis marketImpactAnalysis,
    @JsonProperty("summary") @NotNull String summary,
    @JsonProperty("timestamp") @NotNull Instant timestamp
) {
    
    /**\n     * Risk levels for transactions.\n     */\n    public enum RiskLevel {\n        LOW, MEDIUM, HIGH, CRITICAL\n    }\n    \n    /**\n     * Creates AIInsights with validation.\n     */\n    public AIInsights {\n        Objects.requireNonNull(riskLevel, \"Risk level cannot be null\");\n        Objects.requireNonNull(gasSavingSuggestions, \"Gas saving suggestions cannot be null\");\n        Objects.requireNonNull(optimizationTips, \"Optimization tips cannot be null\");\n        Objects.requireNonNull(failurePrediction, \"Failure prediction cannot be null\");\n        Objects.requireNonNull(summary, \"Summary cannot be null\");\n        Objects.requireNonNull(timestamp, \"Timestamp cannot be null\");\n        \n        if (confidenceScore < 0.0 || confidenceScore > 1.0) {\n            throw new IllegalArgumentException(\"Confidence score must be between 0.0 and 1.0\");\n        }\n    }\n    \n    /**\n     * Failure prediction analysis.\n     */\n    public record FailurePrediction(\n        @JsonProperty(\"willSucceed\") boolean willSucceed,\n        @JsonProperty(\"confidence\") double confidence,\n        @JsonProperty(\"potentialFailureReasons\") @NotNull List<String> potentialFailureReasons,\n        @JsonProperty(\"suggestedGasLimit\") @Nullable String suggestedGasLimit,\n        @JsonProperty(\"alternativeStrategies\") @NotNull List<String> alternativeStrategies\n    ) {\n        public FailurePrediction {\n            Objects.requireNonNull(potentialFailureReasons, \"Potential failure reasons cannot be null\");\n            Objects.requireNonNull(alternativeStrategies, \"Alternative strategies cannot be null\");\n            \n            if (confidence < 0.0 || confidence > 1.0) {\n                throw new IllegalArgumentException(\"Confidence must be between 0.0 and 1.0\");\n            }\n        }\n    }\n    \n    /**\n     * Market impact analysis.\n     */\n    public record MarketImpactAnalysis(\n        @JsonProperty(\"estimatedSlippage\") @NotNull String estimatedSlippage,\n        @JsonProperty(\"priceImpact\") @NotNull String priceImpact,\n        @JsonProperty(\"liquidityRequirement\") @NotNull String liquidityRequirement,\n        @JsonProperty(\"optimalTiming\") @Nullable String optimalTiming,\n        @JsonProperty(\"marketConditions\") @NotNull List<String> marketConditions\n    ) {\n        public MarketImpactAnalysis {\n            Objects.requireNonNull(estimatedSlippage, \"Estimated slippage cannot be null\");\n            Objects.requireNonNull(priceImpact, \"Price impact cannot be null\");\n            Objects.requireNonNull(liquidityRequirement, \"Liquidity requirement cannot be null\");\n            Objects.requireNonNull(marketConditions, \"Market conditions cannot be null\");\n        }\n    }\n    \n    /**\n     * Builder for AIInsights.\n     */\n    public static class Builder {\n        private RiskLevel riskLevel;\n        private double confidenceScore;\n        private List<String> gasSavingSuggestions;\n        private List<String> securityWarnings;\n        private List<String> optimizationTips;\n        private FailurePrediction failurePrediction;\n        private MarketImpactAnalysis marketImpactAnalysis;\n        private String summary;\n        private Instant timestamp = Instant.now();\n        \n        public Builder riskLevel(@NotNull RiskLevel riskLevel) {\n            this.riskLevel = Objects.requireNonNull(riskLevel);\n            return this;\n        }\n        \n        public Builder confidenceScore(double confidenceScore) {\n            this.confidenceScore = confidenceScore;\n            return this;\n        }\n        \n        public Builder gasSavingSuggestions(@NotNull List<String> gasSavingSuggestions) {\n            this.gasSavingSuggestions = Objects.requireNonNull(gasSavingSuggestions);\n            return this;\n        }\n        \n        public Builder securityWarnings(@Nullable List<String> securityWarnings) {\n            this.securityWarnings = securityWarnings;\n            return this;\n        }\n        \n        public Builder optimizationTips(@NotNull List<String> optimizationTips) {\n            this.optimizationTips = Objects.requireNonNull(optimizationTips);\n            return this;\n        }\n        \n        public Builder failurePrediction(@NotNull FailurePrediction failurePrediction) {\n            this.failurePrediction = Objects.requireNonNull(failurePrediction);\n            return this;\n        }\n        \n        public Builder marketImpactAnalysis(@Nullable MarketImpactAnalysis marketImpactAnalysis) {\n            this.marketImpactAnalysis = marketImpactAnalysis;\n            return this;\n        }\n        \n        public Builder summary(@NotNull String summary) {\n            this.summary = Objects.requireNonNull(summary);\n            return this;\n        }\n        \n        public Builder timestamp(@NotNull Instant timestamp) {\n            this.timestamp = Objects.requireNonNull(timestamp);\n            return this;\n        }\n        \n        public AIInsights build() {\n            return new AIInsights(riskLevel, confidenceScore, gasSavingSuggestions,\n                                securityWarnings, optimizationTips, failurePrediction,\n                                marketImpactAnalysis, summary, timestamp);\n        }\n    }\n    \n    /**\n     * Creates a new builder.\n     * \n     * @return a new Builder instance\n     */\n    public static Builder builder() {\n        return new Builder();\n    }\n}\n\n/**\n * Bundle optimization result.\n * \n * Contains optimization suggestions for transaction bundles\n * including gas savings and reordering recommendations.\n */\nrecord BundleOptimization(\n    @JsonProperty(\"originalGas\") @NotNull String originalGas,\n    @JsonProperty(\"optimizedGas\") @NotNull String optimizedGas,\n    @JsonProperty(\"gasSaved\") @NotNull String gasSaved,\n    @JsonProperty(\"suggestions\") @NotNull List<String> suggestions,\n    @JsonProperty(\"reorderedIndices\") @NotNull List<Integer> reorderedIndices,\n    @JsonProperty(\"warnings\") @Nullable List<String> warnings,\n    @JsonProperty(\"timestamp\") @NotNull Instant timestamp\n) {\n    \n    /**\n     * Creates BundleOptimization with validation.\n     */\n    public BundleOptimization {\n        Objects.requireNonNull(originalGas, \"Original gas cannot be null\");\n        Objects.requireNonNull(optimizedGas, \"Optimized gas cannot be null\");\n        Objects.requireNonNull(gasSaved, \"Gas saved cannot be null\");\n        Objects.requireNonNull(suggestions, \"Suggestions cannot be null\");\n        Objects.requireNonNull(reorderedIndices, \"Reordered indices cannot be null\");\n        Objects.requireNonNull(timestamp, \"Timestamp cannot be null\");\n    }\n    \n    /**\n     * Builder for BundleOptimization.\n     */\n    public static class Builder {\n        private String originalGas;\n        private String optimizedGas;\n        private String gasSaved;\n        private List<String> suggestions;\n        private List<Integer> reorderedIndices;\n        private List<String> warnings;\n        private Instant timestamp = Instant.now();\n        \n        public Builder originalGas(@NotNull String originalGas) {\n            this.originalGas = Objects.requireNonNull(originalGas);\n            return this;\n        }\n        \n        public Builder optimizedGas(@NotNull String optimizedGas) {\n            this.optimizedGas = Objects.requireNonNull(optimizedGas);\n            return this;\n        }\n        \n        public Builder gasSaved(@NotNull String gasSaved) {\n            this.gasSaved = Objects.requireNonNull(gasSaved);\n            return this;\n        }\n        \n        public Builder suggestions(@NotNull List<String> suggestions) {\n            this.suggestions = Objects.requireNonNull(suggestions);\n            return this;\n        }\n        \n        public Builder reorderedIndices(@NotNull List<Integer> reorderedIndices) {\n            this.reorderedIndices = Objects.requireNonNull(reorderedIndices);\n            return this;\n        }\n        \n        public Builder warnings(@Nullable List<String> warnings) {\n            this.warnings = warnings;\n            return this;\n        }\n        \n        public Builder timestamp(@NotNull Instant timestamp) {\n            this.timestamp = Objects.requireNonNull(timestamp);\n            return this;\n        }\n        \n        public BundleOptimization build() {\n            return new BundleOptimization(originalGas, optimizedGas, gasSaved,\n                                        suggestions, reorderedIndices, warnings, timestamp);\n        }\n    }\n    \n    /**\n     * Creates a new builder.\n     * \n     * @return a new Builder instance\n     */\n    public static Builder builder() {\n        return new Builder();\n    }\n}\n