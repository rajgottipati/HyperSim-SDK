package io.hypersim.sdk.core;

import io.hypersim.sdk.types.*;
import io.hypersim.sdk.exceptions.*;
import org.junit.jupiter.api.*;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.time.Duration;
import java.time.Instant;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Unit tests for HyperSimSDK core functionality.
 * 
 * Tests basic SDK initialization, configuration validation,
 * and transaction simulation workflow.
 * 
 * @author MiniMax Agent
 * @version 1.0.0
 * @since 1.0.0
 */
class HyperSimSDKTest {
    
    private static final String VALID_ADDRESS = "0x1234567890123456789012345678901234567890";
    private static final String ANOTHER_VALID_ADDRESS = "0x0987654321098765432109876543210987654321";
    
    @Test\n    @DisplayName(\"Should initialize SDK with simple configuration\")\n    void shouldInitializeWithSimpleConfig() {\n        var config = HyperSimConfig.simple(Network.MAINNET);\n        \n        assertDoesNotThrow(() -> {\n            try (var sdk = new HyperSimSDK(config)) {\n                assertNotNull(sdk);\n                assertEquals(Network.MAINNET, sdk.getConfig().network());\n                assertFalse(sdk.getConfig().aiEnabled());\n            }\n        });\n    }\n    \n    @Test\n    @DisplayName(\"Should reject null configuration\")\n    void shouldRejectNullConfiguration() {\n        assertThrows(NullPointerException.class, () -> {\n            new HyperSimSDK(null);\n        });\n    }\n    \n    @Test\n    @DisplayName(\"Should simulate basic transaction\")\n    void shouldSimulateBasicTransaction() {\n        var config = HyperSimConfig.simple(Network.MAINNET);\n        \n        try (var sdk = new HyperSimSDK(config)) {\n            var transaction = TransactionRequest.createTransfer(\n                VALID_ADDRESS,\n                ANOTHER_VALID_ADDRESS,\n                \"1000000000000000000\"\n            );\n            \n            var result = sdk.simulate(transaction).join();\n            \n            assertNotNull(result);\n            assertTrue(result.success()); // Mock implementation returns success\n            assertNotNull(result.gasUsed());\n            assertNotNull(result.blockType());\n            assertTrue(result.estimatedBlock() > 0);\n        }\n    }\n    \n    @Test\n    @DisplayName(\"Should validate transaction before simulation\")\n    void shouldValidateTransactionBeforeSimulation() {\n        var config = HyperSimConfig.simple(Network.MAINNET);\n        \n        try (var sdk = new HyperSimSDK(config)) {\n            assertThrows(Exception.class, () -> {\n                sdk.simulate(null).join();\n            });\n        }\n    }\n    \n    @Test\n    @DisplayName(\"Should handle AI analysis when disabled\")\n    void shouldHandleAIAnalysisWhenDisabled() {\n        var config = HyperSimConfig.simple(Network.MAINNET);\n        \n        try (var sdk = new HyperSimSDK(config)) {\n            var mockResult = SimulationResult.builder()\n                .success(true)\n                .gasUsed(\"21000\")\n                .blockType(BlockType.SMALL)\n                .estimatedBlock(1000)\n                .build();\n            \n            var future = sdk.getAIInsights(mockResult);\n            \n            assertThrows(Exception.class, () -> future.join());\n        }\n    }\n    \n    @Test\n    @DisplayName(\"Should get network status\")\n    void shouldGetNetworkStatus() {\n        var config = HyperSimConfig.simple(Network.MAINNET);\n        \n        try (var sdk = new HyperSimSDK(config)) {\n            var networkStatus = sdk.getNetworkStatus().join();\n            \n            assertNotNull(networkStatus);\n            assertEquals(Network.MAINNET, networkStatus.network());\n            assertTrue(networkStatus.isHealthy());\n            assertTrue(networkStatus.latestBlock() > 0);\n        }\n    }\n    \n    @Test\n    @DisplayName(\"Should optimize empty bundle gracefully\")\n    void shouldOptimizeEmptyBundleGracefully() {\n        var config = HyperSimConfig.simple(Network.MAINNET);\n        \n        try (var sdk = new HyperSimSDK(config)) {\n            var future = sdk.optimizeBundle(java.util.List.of());\n            \n            assertThrows(Exception.class, () -> future.join());\n        }\n    }\n    \n    @Test\n    @DisplayName(\"Should handle WebSocket when disabled\")\n    void shouldHandleWebSocketWhenDisabled() {\n        var config = HyperSimConfig.simple(Network.MAINNET); // streaming disabled\n        \n        try (var sdk = new HyperSimSDK(config)) {\n            assertFalse(sdk.isWebSocketConnected());\n            \n            var future = sdk.connectWebSocket();\n            assertThrows(Exception.class, () -> future.join());\n        }\n    }\n    \n    @Test\n    @DisplayName(\"Should handle shutdown gracefully\")\n    void shouldHandleShutdownGracefully() {\n        var config = HyperSimConfig.simple(Network.MAINNET);\n        \n        var sdk = new HyperSimSDK(config);\n        \n        assertDoesNotThrow(() -> {\n            sdk.close();\n            sdk.close(); // Second close should be safe\n        });\n        \n        // Operations after close should throw IllegalStateException\n        assertThrows(IllegalStateException.class, () -> {\n            var transaction = TransactionRequest.createTransfer(\n                VALID_ADDRESS, ANOTHER_VALID_ADDRESS, \"1000000000000000000\");\n            sdk.simulate(transaction).join();\n        });\n    }\n    \n    @Test\n    @DisplayName(\"Should build config with all options\")\n    void shouldBuildConfigWithAllOptions() {\n        var config = HyperSimConfig.builder()\n            .network(Network.TESTNET)\n            .aiEnabled(true)\n            .openaiApiKey(\"test-key\")\n            .crossLayerEnabled(true)\n            .streamingEnabled(true)\n            .timeout(Duration.ofSeconds(60))\n            .debug(true)\n            .metricsEnabled(true)\n            .build();\n        \n        assertEquals(Network.TESTNET, config.network());\n        assertTrue(config.aiEnabled());\n        assertEquals(\"test-key\", config.openaiApiKey());\n        assertTrue(config.crossLayerEnabled());\n        assertTrue(config.streamingEnabled());\n        assertEquals(Duration.ofSeconds(60), config.timeout());\n        assertTrue(config.debug());\n        assertTrue(config.metricsEnabled());\n    }\n    \n    @Test\n    @DisplayName(\"Should assess risk for transactions\")\n    void shouldAssessRiskForTransactions() {\n        var config = HyperSimConfig.simple(Network.MAINNET);\n        \n        try (var sdk = new HyperSimSDK(config)) {\n            var transaction = TransactionRequest.createTransfer(\n                VALID_ADDRESS,\n                ANOTHER_VALID_ADDRESS,\n                \"1000000000000000000\"\n            );\n            \n            var riskAssessment = sdk.assessRisk(transaction).join();\n            \n            assertNotNull(riskAssessment);\n            assertNotNull(riskAssessment.riskLevel());\n            assertNotNull(riskAssessment.factors());\n            assertTrue(riskAssessment.confidence() >= 0.0 && riskAssessment.confidence() <= 1.0);\n        }\n    }\n}\n